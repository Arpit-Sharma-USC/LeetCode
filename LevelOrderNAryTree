/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> answer = new LinkedList<>();
        if(root==null)
            return answer;
        Queue<Node> cache = new LinkedList<>();
        cache.add(root);
        while(!cache.isEmpty())
        {
            List<Integer> currLevel = new LinkedList<>();
            int n = cache.size();
            for(int i =0;i<n;i++)
            {
                Node temp=cache.poll();
                
                currLevel.add(temp.val);
                for(Node each:temp.children)
                    cache.add(each);
            }
            answer.add(currLevel);
        }
        return answer;
    }
}
